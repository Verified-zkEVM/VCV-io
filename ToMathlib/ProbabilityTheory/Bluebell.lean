import Iris
import Iris.Algebra.CMRA
import ToMathlib.ProbabilityTheory.Coupling

/-! # Formalizing the Bluebell paper -/

open Iris ProbabilityTheory MeasureTheory

-- Indexed tuples
def indexedTuple (Œ± : Type*) (I : Finset ‚Ñï) := I ‚Üí Œ±

def indexedTuple.remove (Œ± : Type*) (I : Finset ‚Ñï) (J : Finset ‚Ñï) (h : J ‚äÜ I) :
    indexedTuple Œ± I ‚Üí indexedTuple Œ± (I \ J) :=
  fun x i => x ‚ü®i.1, by aesop‚ü©

/-- A typeclass for expressing that a type `M` has a validity predicate `‚úì` -/
class Valid (M : Type*) where
  valid : M ‚Üí Prop

prefix:50 "‚úì" => Valid.valid

instance {Œ± : Type*} [Valid Œ±] (p : Œ± ‚Üí Prop) : Valid (Subtype p) where
  valid := fun x => Valid.valid x.1

instance {Œ± Œ≤ : Type*} [Valid Œ±] [Valid Œ≤] : Valid (Œ± √ó Œ≤) where
  valid := fun x => Valid.valid x.1 ‚àß Valid.valid x.2

/-- The class of **discrete** cameras, which do not care about step-indexing -/
class DiscreteCMRA (Œ± : Type*) extends CommSemigroup Œ±, Valid Œ± where
  equiv : Œ± ‚Üí Œ± ‚Üí Prop
  pcore : Œ± ‚Üí Option Œ±

  is_equiv : Equivalence equiv

  mul_equiv {x y z} : equiv y z ‚Üí equiv (x * y) (x * z)
  pcore_equiv {x y cx} : equiv x y ‚Üí pcore x = some cx ‚Üí ‚àÉ cy, pcore y = some cy ‚àß equiv cx cy

  pcore_left {x cx} : pcore x = some cx ‚Üí equiv (cx * x) x
  pcore_idem {x cx} : pcore x = some cx ‚Üí equiv x cx
  pcore_mono' {x y cx} : pcore x = some cx ‚Üí ‚àÉ cy, pcore (x * y) = some (cx * cy)

  -- TODO: check whether these are stated correctly
  valid_equiv {x y} : equiv x y ‚Üí valid x ‚Üí valid y
  valid_mul_left {x y} : valid (x * y) ‚Üí valid x
  valid_extend {x y‚ÇÅ y‚ÇÇ} : valid x ‚Üí equiv x (y‚ÇÅ * y‚ÇÇ) ‚Üí ‚àÉ z‚ÇÅ z‚ÇÇ, equiv x (z‚ÇÅ * z‚ÇÇ) ‚àß valid z‚ÇÅ ‚àß valid z‚ÇÇ

-- /-- A discrete CMRA can be converted to a regular CMRA -/
instance DiscreteCMRA.instCMRA (Œ± : Type*) [DiscreteCMRA Œ±] : CMRA Œ± := sorry

-- class DiscreteUnitalCMRA (Œ± : Type*) extends DiscreteCMRA Œ±, One Œ± where

/-- Typeclass for expressing that a type `M` with multiplication and a one satisfies
`1 * a = a` on the left.

This is a unbundled version of `MulOneClass` where we don't require `a * 1 = a` on the right. -/
class MulOneLeftClass (M : Type*) extends One M, Mul M where
  /-- One is a left neutral element for multiplication -/
  protected one_mul : ‚àÄ a : M, 1 * a = a

attribute [simp] MulOneLeftClass.one_mul

instance {M : Type*} [MulOneClass M] : MulOneLeftClass M where
  one_mul := one_mul

/-- An **ordered unital resource algebra** is a type with a multiplication, a one, a preorder `‚â§`,
  and a validity predicate `‚úì`, such that `1` is valid, validity is closed under multiplication
  and the preorder, and left multiplication is monotone. -/
class OrderedUnitalResourceAlgebra (M : Type*) extends MulOneLeftClass M, Valid M, Preorder M where
  valid_one : ‚úì (1 : M)
  valid_mul {a b} : ‚úì a ‚Üí ‚úì b ‚Üí ‚úì (a * b : M)
  valid_mono {a b} : a ‚â§ b ‚Üí ‚úì b ‚Üí ‚úì (a : M)
  mul_left_mono {a b c} : a ‚â§ b ‚Üí a * c ‚â§ (b * c : M)

/-- Define a discrete `CMRA` instance given an `OrderedUnitalResourceAlgebra` instance -/
instance OrderedUnitalResourceAlgebra.instCMRA {M : Type*} [OrderedUnitalResourceAlgebra M] :
    DiscreteCMRA M := sorry


/-! ## Permissions -/

/-- A permission on type `Œ±` is a map from `Œ±` to the non-negative rationals `‚Ñö‚â•0`.

We need to have the `Multiplicative` tag in order to specify that multiplication is pointwise
addition, and unit is the constant zero map. -/
@[reducible] def Permission (Œ± : Type*) := Multiplicative (Œ± ‚Üí ‚Ñö‚â•0)

variable {Œ± : Type*}

-- instance : Preorder (Permission Œ±) := inferInstanceAs (Preorder (Multiplicative (Œ± ‚Üí ‚Ñö‚â•0)))
-- instance : MulOneClass (Permission Œ±) := inferInstanceAs (MulOneClass (Multiplicative (Œ± ‚Üí ‚Ñö‚â•0)))
-- instance : MulLeftMono (Permission Œ±) := inferInstanceAs (MulLeftMono (Multiplicative (Œ± ‚Üí ‚Ñö‚â•0)))

/-- Permissions form an `OrderedUnitalResourceAlgebra` where `‚â§` is defined pointwise, a resource is valid iff it's below `1` pointwise, and composition is pointwise multiplication -/
instance : OrderedUnitalResourceAlgebra (Permission Œ±) where
  valid := fun p => p ‚â§ 1
  valid_one := by simp
  valid_mul := by intro a b ha hb; simp_all only [le_one_iff_eq_one, mul_one, le_refl]
  valid_mono := by intro a b h h'; simp_all only [le_one_iff_eq_one]
  mul_left_mono := by intro a b c h i; sorry


/-! ## Probability stuff -/

/-- A measure space is a tuple of a measurable space and a measure on it. This is essentially the
  bundled version of `Measure` -/
def MeasureTuple (Œ© : Type*) := (‚Ñ± : MeasurableSpace Œ©) √ó Measure[‚Ñ±] Œ©

/-- A probability space is a `MeasureTuple` where the measure is a probability measure (i.e. has
  total measure `1`) -/
def ProbabilitySpace (Œ© : Type*) := (‚Ñ± : MeasurableSpace Œ©) √ó {Œº : Measure[‚Ñ±] Œ© // IsProbabilityMeasure Œº}

variable {Œ© : Type*}

def MeasureTuple.œÉAlg (m : MeasureTuple Œ©) : MeasurableSpace Œ© := m.1
def MeasureTuple.Œº (m : MeasureTuple Œ©) : Measure[m.1] Œ© := m.2

@[simp]
lemma MeasureTuple.œÉAlg_apply (m : MeasureTuple Œ©) : MeasureTuple.œÉAlg m = m.1 := rfl
@[simp]
lemma MeasureTuple.Œº_apply (m : MeasureTuple Œ©) : MeasureTuple.Œº m = m.2 := rfl

def ProbabilitySpace.œÉAlg (m : ProbabilitySpace Œ©) : MeasurableSpace Œ© := m.1
def ProbabilitySpace.Œº (m : ProbabilitySpace Œ©) : Measure[m.1] Œ© := m.2.1

@[simp]
lemma ProbabilitySpace.œÉAlg_apply (m : ProbabilitySpace Œ©) : ProbabilitySpace.œÉAlg m = m.1 := rfl
@[simp]
lemma ProbabilitySpace.Œº_apply (m : ProbabilitySpace Œ©) : ProbabilitySpace.Œº m = m.2.1 := rfl

/-- We define `(‚Ñ±, Œº) ‚â§ (ùí¢, ŒΩ)` if `‚Ñ± ‚â§ ùí¢` and `Œº` is the restriction of `ŒΩ` to `‚Ñ±` -/
instance : Preorder (MeasureTuple Œ©) where
  -- TODO: double-check if we are supposed to use `map` or `comap`
  le m‚ÇÅ m‚ÇÇ := (m‚ÇÅ.œÉAlg ‚â§ m‚ÇÇ.œÉAlg) ‚àß m‚ÇÅ.Œº = (@Measure.map _ _ m‚ÇÇ.œÉAlg m‚ÇÅ.œÉAlg id m‚ÇÇ.Œº)
  le_refl m := by simp only [LE.le, imp_self, implies_true, Measure.map_id, and_self]
  le_trans := by
    rintro ‚ü®‚Ñ±‚ÇÅ, Œº‚ÇÅ‚ü© ‚ü®‚Ñ±‚ÇÇ, Œº‚ÇÇ‚ü© ‚ü®‚Ñ±‚ÇÉ, Œº‚ÇÉ‚ü© ‚ü®h‚Ñ±‚ÇÅ‚ÇÇ, hŒº‚ÇÅ‚ÇÇ‚ü© ‚ü®h‚Ñ±‚ÇÇ‚ÇÉ, hŒº‚ÇÇ‚ÇÉ‚ü©
    simp_all
    refine ‚ü®le_trans h‚Ñ±‚ÇÅ‚ÇÇ h‚Ñ±‚ÇÇ‚ÇÉ, ?_‚ü©
    ¬∑ rw [Measure.map_map] <;> aesop

/-- We define `(‚Ñ±, Œº) ‚â§ (ùí¢, ŒΩ)` if `‚Ñ± ‚â§ ùí¢` and `Œº` is the restriction of `ŒΩ` to `‚Ñ±` -/
instance : Preorder (ProbabilitySpace Œ©) where
  le m‚ÇÅ m‚ÇÇ := (m‚ÇÅ.œÉAlg ‚â§ m‚ÇÇ.œÉAlg) ‚àß m‚ÇÅ.Œº = (@Measure.map _ _ m‚ÇÇ.œÉAlg m‚ÇÅ.œÉAlg id m‚ÇÇ.Œº)
  le_refl m := by simp only [LE.le, imp_self, implies_true, Measure.map_id, and_self]
  le_trans := by
    rintro ‚ü®‚Ñ±‚ÇÅ, ‚ü®Œº‚ÇÅ, _‚ü©‚ü© ‚ü®‚Ñ±‚ÇÇ, ‚ü®Œº‚ÇÇ, _‚ü©‚ü© ‚ü®‚Ñ±‚ÇÉ, ‚ü®Œº‚ÇÉ, _‚ü©‚ü© ‚ü®h‚Ñ±‚ÇÅ‚ÇÇ, hŒº‚ÇÅ‚ÇÇ‚ü© ‚ü®h‚Ñ±‚ÇÇ‚ÇÉ, hŒº‚ÇÇ‚ÇÉ‚ü©
    simp_all
    refine ‚ü®le_trans h‚Ñ±‚ÇÅ‚ÇÇ h‚Ñ±‚ÇÇ‚ÇÉ, ?_‚ü©
    ¬∑ rw [Measure.map_map] <;> aesop

/-- The sum of two measurable spaces on the same space `Œ©` is the measurable space generated by the
  union of the two spaces -/
def MeasurableSpace.sum (m‚ÇÅ : MeasurableSpace Œ©) (m‚ÇÇ : MeasurableSpace Œ©) : MeasurableSpace Œ© :=
  MeasurableSpace.generateFrom (MeasurableSet[m‚ÇÅ] ‚à™ MeasurableSet[m‚ÇÇ])

variable {m‚ÇÅ : MeasurableSpace Œ©} {m‚ÇÇ : MeasurableSpace Œ©}

/-- An independent product of measures `Œº‚ÇÅ` and `Œº‚ÇÇ` (on measurable spaces `m‚ÇÅ` and `m‚ÇÇ`,
    respectively) is a measure `Œº` on the sum of `m‚ÇÅ` and `m‚ÇÇ` that satisfies the product formula -/
@[ext]
class Measure.IndependentProduct (Œº‚ÇÅ : Measure[m‚ÇÅ] Œ©) (Œº‚ÇÇ : Measure[m‚ÇÇ] Œ©) where
  Œº : Measure[MeasurableSpace.sum m‚ÇÅ m‚ÇÇ] Œ©
  inter_eq_prod {X Y} (hX : MeasurableSet[m‚ÇÅ] X) (hY : MeasurableSet[m‚ÇÇ] Y) :
    Œº (X ‚à© Y) = Œº‚ÇÅ X * Œº‚ÇÇ Y

/-- The independent product of two measures is unique, if it exists -/
instance {Œº‚ÇÅ : Measure[m‚ÇÅ] Œ©} {Œº‚ÇÇ : Measure[m‚ÇÇ] Œ©} : Subsingleton (Measure.IndependentProduct Œº‚ÇÅ Œº‚ÇÇ) := by
  constructor
  intro ‚ü®Œº, hŒº‚ü© ‚ü®Œº', hŒº'‚ü©
  ext
  simp
  sorry
  -- To prove this, [Li et al. 2023] requires the Dynkin œÄ-Œª theorem

noncomputable section

/-- The partial operation of independent product on `MeasureTuple`s, when it exists -/
def MeasureTuple.indepProduct (m‚ÇÅ : MeasureTuple Œ©) (m‚ÇÇ : MeasureTuple Œ©) : Option (MeasureTuple Œ©) := by
  classical
  by_cases h : Nonempty (Measure.IndependentProduct m‚ÇÅ.2 m‚ÇÇ.2)
  ¬∑ exact some ‚ü®MeasurableSpace.sum m‚ÇÅ.1 m‚ÇÇ.1, (Classical.choice h).Œº‚ü©
  ¬∑ exact none

def ProbabilitySpace.indepProduct (m‚ÇÅ : ProbabilitySpace Œ©) (m‚ÇÇ : ProbabilitySpace Œ©) : Option (ProbabilitySpace Œ©) := by
  classical
  by_cases h : Nonempty (Measure.IndependentProduct m‚ÇÅ.2.1 m‚ÇÇ.2.1)
  ¬∑ exact some ‚ü®MeasurableSpace.sum m‚ÇÅ.1 m‚ÇÇ.1, ‚ü®(Classical.choice h).Œº, by sorry‚ü©‚ü©
  ¬∑ exact none

-- We want the trivial `{‚àÖ, Œ©}` sigma algebra, upon which the measure is defined to be `0` on `‚àÖ`
-- and `1` on `Œ©`
instance [inst : Nonempty Œ©] : One (ProbabilitySpace Œ©) where
  one := ‚ü®‚ä•, ‚ü®@Measure.dirac _ ‚ä• (Classical.choice inst), by constructor; simp [Measure.dirac]‚ü©‚ü©

abbrev PSp (Œ© : Type*) := WithTop (ProbabilitySpace Œ©)

@[simp]
instance : Valid (PSp Œ©) where
  valid := fun x => match x with | some _ => True | none => False

instance [inst : Nonempty Œ©] : OrderedUnitalResourceAlgebra (PSp Œ©) where
  mul := fun x y => match x, y with
    | some x, some y => if h : (x.indepProduct y).isSome then (x.indepProduct y).get h else none
    | _, _ => none
  valid_one := by simp
  -- There seems to be a problem here: if `a = some x`, `b = some y`, but `x.indepProduct y = none`,
  -- then `a` is valid but `a * b = ‚ä§` is not
  valid_mul := by intro a b ha hb; cases a <;> cases b <;> simp_all; sorry
  valid_mono := by intro a b _ _; cases a <;> cases b <;> simp_all
  one_mul := sorry
  mul_left_mono := sorry

variable {V : Type*}

-- Needs to encode the term `P = P' ‚äó ùüô_ (p.support ‚Üí V)` in the paper
def ProbabilitySpace.compatiblePerm (_P : ProbabilitySpace (Œ± ‚Üí V)) (p : Permission Œ±) : Prop :=
  ‚àÉ _P' : ProbabilitySpace ({a // p a > 0} ‚Üí V), True

/-- Generalize compatibility to `PSp` by letting `‚ä§` be compatible with all permission maps -/
def PSp.compatiblePerm (P : PSp (Œ± ‚Üí V)) (p : Permission Œ±) : Prop := match P with
  | some P => ProbabilitySpace.compatiblePerm P p
  | none => True

@[reducible]
def PSpPm (Œ± : Type*) (V : Type*) :=
  {Pp : PSp (Œ± ‚Üí V) √ó Permission Œ± // Pp.1.compatiblePerm Pp.2}

@[simp]
instance [Nonempty V] : One (PSpPm Œ± V) where
  one := ‚ü®‚ü®One.one, One.one‚ü©, by simp [One.one, PSp.compatiblePerm, ProbabilitySpace.compatiblePerm]‚ü©

/-- Multiplication is pointwise product of the probability space and the permission -/
@[simp]
instance [Nonempty V] : Mul (PSpPm Œ± V) where
  -- TODO: need to prove product preserves compatibility
  mul Pp‚ÇÅ Pp‚ÇÇ := ‚ü®‚ü®Pp‚ÇÅ.1.1 * Pp‚ÇÇ.1.1, Pp‚ÇÅ.1.2 * Pp‚ÇÇ.1.2‚ü©, by sorry‚ü©

-- instance : Valid (PSpPm Œ± V) := inferInstanceAs <|
--   Valid (Subtype (fun Pp : PSp (Œ± ‚Üí V) √ó Permission Œ± => Pp.1.compatiblePerm Pp.2))

instance [Nonempty V] : OrderedUnitalResourceAlgebra (PSpPm Œ± V) where
  one_mul := by simp; intro P p h; sorry
  valid_one := by simp [Valid.valid, One.one]; sorry
  valid_mul := by sorry
  valid_mono := by sorry
  mul_left_mono := by sorry

-- To handle multiple programs drawn from index set `I : Finset ‚Ñï`, we use the RA `I ‚Üí PSpPm` where
-- operations are lifted pointwise

-- (Hyper-)assertions are defined as `(I ‚Üí PSpPm) -[upward closed]‚Üí Prop`

end
