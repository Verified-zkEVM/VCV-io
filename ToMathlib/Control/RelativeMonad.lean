/-
Copyright (c) 2025 Quang Dao. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Quang Dao
-/
import Mathlib.Control.Monad.Basic
import Mathlib.CategoryTheory.Monad.Basic

/-!
# Relative monad

-/

namespace CategoryTheory

open Category

universe v‚ÇÅ u‚ÇÅ

-- morphism levels before object levels. See note [CategoryTheory universes].
variable (C D : Type u‚ÇÅ) [Category.{v‚ÇÅ} C] [Category.{v‚ÇÅ} D]

/-- The data of a **relative monad** over a functor `F : C ‚ü∂ D` consists of:
- a map between objects `T : C ‚Üí D`
- a natural transformation `Œ∑ : ‚àÄ {X}, F X ‚ü∂ T X`
- a natural transformation `Œº : ‚àÄ {X Y}, (F X ‚ü∂ T Y) ‚ü∂ (T X ‚ü∂ T Y)`
satisfying three equations:
- `Œº_{X, X} ‚àò Œ∑_X = 1_{T X}` (left unit)
- `‚àÄ f, Œ∑_X ‚â´ Œº_{X, Y} = f` (right unit)
- `‚àÄ f g, Œº_{X, Z} (f ‚â´ Œº_{Y, Z} g) = Œº_{X, Y} f ‚â´ Œº_{Y, Z} g` (associativity)
-/
structure RelativeMonad extends C ‚•§ D where
  /-- The "correction" mapping. -/
  T : C ‚Üí D
  /-- The unit for the relative monad. -/
  Œ∑ : ‚àÄ {X}, toFunctor.obj X ‚ü∂ T X
  /-- The multiplication for the monad. -/
  Œº : ‚àÄ {X Y}, ((toFunctor.obj X) ‚ü∂ (T Y)) ‚Üí ((T X) ‚ü∂ (T Y))

  left_unit : ‚àÄ {X}, Œº (@Œ∑ X) = ùüô _ := by aesop_cat

  right_unit : ‚àÄ {X Y}, ‚àÄ f : (toFunctor.obj X) ‚ü∂ (T Y), Œ∑ ‚â´ (Œº f) = f := by aesop_cat

  assoc : ‚àÄ {X Y Z}, ‚àÄ f : (toFunctor.obj X) ‚ü∂ (T Y), ‚àÄ g : (toFunctor.obj Y) ‚ü∂ (T Z),
    Œº (f ‚â´ Œº g) = (Œº f) ‚â´ (Œº g) := by aesop_cat

end CategoryTheory

universe u w v

/-- Type class for the relative pure operation -/
class RelativePure (r : Type u ‚Üí Type w) (f : Type u ‚Üí Type v) where
  /-- The relative pure operation -/
  pure·µ£ : {Œ± : Type u} ‚Üí r Œ± ‚Üí f Œ±

export RelativePure (pure·µ£)

/-- Type class for the relative bind operation -/
class RelativeBind (r : Type u ‚Üí Type w) (m : Type u ‚Üí Type v) where
  /-- The relative bind operation -/
  bind·µ£ : {Œ± Œ≤ : Type u} ‚Üí m Œ± ‚Üí (r Œ± ‚Üí m Œ≤) ‚Üí m Œ≤

export RelativeBind (bind·µ£)

/-- Type class for the relative map operation -/
class RelativeFunctor (r : Type u ‚Üí Type v) (f : Type u ‚Üí Type w) where
  /-- The relative map operation -/
  map·µ£ : {Œ± Œ≤ : Type u} ‚Üí (r Œ± ‚Üí r Œ≤) ‚Üí (f Œ± ‚Üí f Œ≤)
  mapConst·µ£ : {Œ± Œ≤ : Type u} ‚Üí r Œ± ‚Üí f Œ≤ ‚Üí f Œ± := map·µ£ ‚àò Function.const _

export RelativeFunctor (map·µ£ mapConst·µ£)

-- Don't think sequencing makes sense in the relative setting?

-- class RelativeSeq (r : Type u ‚Üí Type w) (m : Type u ‚Üí Type v) [Seq r] where
--   /-- The relative seq operation -/
--   seq·µ£ : {Œ± Œ≤ : Type u} ‚Üí m (Œ± ‚Üí Œ≤) ‚Üí (Unit ‚Üí m Œ±) ‚Üí m Œ≤

-- export RelativeSeq (seq·µ£)

-- class RelativeSeqLeft (r : Type u ‚Üí Type w) (m : Type u ‚Üí Type v) where
--   /-- The relative seq left operation -/
--   seqLeft·µ£ : {Œ± Œ≤ : Type u} ‚Üí m Œ± ‚Üí (Unit ‚Üí m Œ≤) ‚Üí m Œ±

-- export RelativeSeqLeft (seqLeft·µ£)

-- class RelativeSeqRight (r : Type u ‚Üí Type w) (m : Type u ‚Üí Type v) where
--   /-- The relative seq right operation -/
--   seqRight·µ£ : {Œ± Œ≤ : Type u} ‚Üí m Œ± ‚Üí (Unit ‚Üí m Œ≤) ‚Üí m Œ≤

-- export RelativeSeqRight (seqRight·µ£)

@[inherit_doc] infixl:55  " >>=·µ£ " => RelativeBind.bind·µ£
@[inherit_doc] infixr:100 " <$>·µ£ " => RelativeFunctor.map·µ£
-- @[inherit_doc RelativeSeq.seq·µ£]           syntax:60 term:60 " <*>·µ£ " term:61 : term
-- @[inherit_doc RelativeSeqLeft.seqLeft·µ£]   syntax:60 term:60 " <*·µ£ " term:61 : term
-- @[inherit_doc RelativeSeqRight.seqRight·µ£] syntax:60 term:60 " *>·µ£ " term:61 : term

-- macro_rules | `($x <*>·µ£ $y) => `(RelativeSeq.seq·µ£ $x fun _ : Unit => $y)
-- macro_rules | `($x <*·µ£ $y)  => `(RelativeSeqLeft.seqLeft·µ£ $x fun _ : Unit => $y)
-- macro_rules | `($x *>·µ£ $y)  => `(RelativeSeqRight.seqRight·µ£ $x fun _ : Unit => $y)

-- class RelativeApplicative (r : Type u ‚Üí Type w) (m : Type u ‚Üí Type v) [Seq r] [SeqLeft r] [SeqRight r] extends
--     RelativeFunctor r m, RelativePure r m, Seq m, SeqLeft m, SeqRight m where
--   map f x := Seq.seq (pure·µ£ x) (fun _ => f)
--   seqLeft x y := Seq.seq (map·µ£ (fun y => ¬∑) x) y
--   seqRight x y := Seq.seq (map·µ£ (fun y => y *> ¬∑) x) y

/-- Type class for the relative monad -/
class RelativeMonad (r : Type u ‚Üí Type w) (m : Type u ‚Üí Type v) extends RelativePure r m, RelativeBind r m, RelativeFunctor r m where
  map·µ£ f x := bind·µ£ x (pure·µ£ ‚àò f)

-- Cannot make this an instance due to synthesization order
def instSeqOfRelativeMonadOfSeq {r : Type u ‚Üí Type w} {m : Type u ‚Üí Type v}
    [RelativeMonad r m] [Seq r] : Seq m where
  seq f x := bind·µ£ (r := r) (m := m) f (fun y => map·µ£ (y <*> ¬∑) (x ()))

variable {r : Type u ‚Üí Type w} {m f : Type u ‚Üí Type v}

instance [RelativePure Id f] : Pure f where
  pure := @pure·µ£ Id f _

instance [RelativeBind Id m] : Bind m where
  bind := @bind·µ£ Id m _

instance [RelativeFunctor Id f] : Functor f where
  map := @map·µ£ Id f _
  mapConst := @mapConst·µ£ Id f _

instance [RelativeMonad Id m] : Monad m where
  pure := @pure·µ£ Id m _
  bind := @bind·µ£ Id m _

section Lawful

class LawfulRelativeFunctor (r : Type u ‚Üí Type w) (f : Type u ‚Üí Type v) [RelativeFunctor r f] where

  map_const·µ£ {Œ± Œ≤ : Type u} : (mapConst·µ£ : r Œ± ‚Üí f Œ≤ ‚Üí _) = map·µ£ ‚àò (Function.const _)

  id_map·µ£ {Œ± : Type u} (x : f Œ±) : (id : r Œ± ‚Üí _) <$>·µ£ x = x

  comp_map·µ£ {Œ± Œ≤ Œ≥ : Type u} (g : r Œ± ‚Üí r Œ≤) (h : r Œ≤ ‚Üí r Œ≥) (x : f Œ±) :
    (h ‚àò g) <$>·µ£ x = h <$>·µ£ g <$>·µ£ x

export LawfulRelativeFunctor (map_const·µ£ id_map·µ£ comp_map·µ£)

attribute [simp] id_map·µ£

variable {Œ± Œ≤ Œ≥ : Type u}

@[simp] theorem id_map·µ£' [RelativeFunctor r f] [LawfulRelativeFunctor r f] (x : f Œ±) :
    (fun a : r Œ± => a) <$>·µ£ x = x :=
  id_map·µ£ x

@[simp] theorem RelativeFunctor.map_map [RelativeFunctor r f] [LawfulRelativeFunctor r f]
    (h : r Œ± ‚Üí r Œ≤) (g : r Œ≤ ‚Üí r Œ≥) (x : f Œ±) :
      g <$>·µ£ h <$>·µ£ x = (fun a => g (h a)) <$>·µ£ x :=
  (comp_map·µ£ _ _ _).symm

class LawfulRelativeMonad (r : Type u ‚Üí Type w) (m : Type u ‚Üí Type v) [RelativeMonad r m] extends
    LawfulRelativeFunctor r m where

  pure_bind·µ£ {Œ± Œ≤ : Type u} (x : r Œ±) (f : r Œ± ‚Üí m Œ≤) :
    (pure·µ£ x) >>=·µ£ f = f x

  -- bind_map·µ£ : ‚àÄ {Œ± Œ≤ : Type u} (f : m (Œ± ‚Üí Œ≤)) (x : m Œ±),
  --   f >>=·µ£ (fun y => y <$>·µ£ x) =
  --     f <*> x

  bind_pure_comp·µ£ {Œ± Œ≤ : Type u} (f : r Œ± ‚Üí r Œ≤) (x : m Œ±) :
    x >>=·µ£ (fun y => pure·µ£ (f y)) = f <$>·µ£ x

  bind_assoc·µ£ {Œ± Œ≤ Œ≥ : Type u} (x : m Œ±) (f : r Œ± ‚Üí m Œ≤) (g : r Œ≤ ‚Üí m Œ≥) :
    x >>=·µ£ f >>=·µ£ g = x >>=·µ£ fun x ‚Ü¶ f x >>=·µ£ g

export LawfulRelativeMonad (pure_bind·µ£ bind_pure_comp·µ£ bind_assoc·µ£)
attribute [simp] pure_bind·µ£ bind_pure_comp·µ£ bind_assoc·µ£

@[simp] theorem bind_pure·µ£ [RelativeMonad r m] [LawfulRelativeMonad r m] (x : m Œ±) :
    x >>=·µ£ pure·µ£ (r := r) = x := by
  show x >>=·µ£ (fun a => pure·µ£ (id a)) = x
  rw [bind_pure_comp·µ£, id_map·µ£]

theorem map_eq_pure_bind·µ£ [RelativeMonad r m] [LawfulRelativeMonad r m]
    (f : r Œ± ‚Üí r Œ≤) (x : m Œ±) : f <$>·µ£ x = x >>=·µ£ fun a => pure·µ£ (f a) := by
  rw [‚Üê bind_pure_comp·µ£]

-- theorem seq_eq_bind_map·µ£ [RelativeMonad r m] [LawfulRelativeMonad r m]
--     (f : m (Œ± ‚Üí Œ≤)) (x : m Œ±) : f <*> x = f >>=·µ£ (. <$>·µ£ x) := by
--   rw [‚Üê bind_map·µ£]

theorem bind_congr·µ£ [RelativeBind r m] {x : m Œ±} {f g : r Œ± ‚Üí m Œ≤} (h : ‚àÄ a, f a = g a) :
    x >>=·µ£ f = x >>=·µ£ g := by
  simp [funext h]

theorem bind_pure_unit·µ£ [RelativeMonad r m] [LawfulRelativeMonad r m] {x : m PUnit} :
    (x >>=·µ£ fun y : r PUnit => pure·µ£ y) = x := by
  rw [bind_pure_comp·µ£]; exact id_map·µ£ x

theorem map_congr·µ£ [RelativeFunctor r m] {x : m Œ±} {f g : r Œ± ‚Üí r Œ≤} (h : ‚àÄ a, f a = g a) :
    (f <$>·µ£ x : m Œ≤) = g <$>·µ£ x := by
  simp [funext h]

-- theorem seq_eq_bind·µ£ [RelativeMonad r m] [LawfulRelativeMonad r m] (mf : m (Œ± ‚Üí Œ≤)) (x : m Œ±) :
--     mf <*> x = mf >>=·µ£ fun f => f <$>·µ£ x := by
--   rw [‚Üê bind_map·µ£]

-- theorem seqRight_eq_bind [Monad m] [LawfulMonad m] (x : m Œ±) (y : m Œ≤) : x *> y = x >>= fun _ => y := by
--   rw [seqRight_eq]
--   simp only [map_eq_pure_bind, const, seq_eq_bind_map, bind_assoc, pure_bind, id_eq, bind_pure]

-- theorem seqLeft_eq_bind [Monad m] [LawfulMonad m] (x : m Œ±) (y : m Œ≤) : x <* y = x >>= fun a => y >>= fun _ => pure a := by
--   rw [seqLeft_eq]
--   simp only [map_eq_pure_bind, seq_eq_bind_map, bind_assoc, pure_bind, const_apply]

@[simp] theorem map_bind·µ£ [RelativeMonad r m] [LawfulRelativeMonad r m]
    (f : r Œ≤ ‚Üí r Œ≥) (x : m Œ±) (g : r Œ± ‚Üí m Œ≤) :
      f <$>·µ£ (x >>=·µ£ g) = x >>=·µ£ fun a : r Œ± => f <$>·µ£ g a := by
  rw [‚Üê bind_pure_comp·µ£, bind_assoc·µ£]
  simp only [bind_pure_comp·µ£]

@[simp] theorem bind_map_left·µ£ [RelativeMonad r m] [LawfulRelativeMonad r m]
    (f : r Œ± ‚Üí r Œ≤) (x : m Œ±) (g : r Œ≤ ‚Üí m Œ≥) :
      ((f <$>·µ£ x) >>=·µ£ fun b => g b) = (x >>=·µ£ fun a : r Œ± => g (f a)) := by
  rw [‚Üê bind_pure_comp·µ£, bind_assoc·µ£]
  simp only [pure_bind·µ£]

theorem RelativeFunctor.map_unit·µ£ [RelativeMonad r m] [LawfulRelativeMonad r m] {a : m PUnit} :
    (fun y : r PUnit => y) <$>·µ£ a = a := by
  simp [map_const·µ£]

instance [RelativeFunctor Id f] [LawfulRelativeFunctor Id f] : LawfulFunctor f where
  map_const := @map_const·µ£ Id f _ _
  id_map := @id_map·µ£ Id f _ _
  comp_map := @comp_map·µ£ Id f _ _

-- instance [RelativeMonad Id m] [LawfulRelativeMonad Id m] : LawfulMonad m where
--   map_const := @map_const·µ£ Id m _ _
--   id_map := @id_map·µ£ Id m _ _
--   comp_map := @comp_map·µ£ Id m _ _

end Lawful
