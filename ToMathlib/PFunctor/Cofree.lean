/-
Copyright (c) 2025 Devon Tuma. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Quang Dao
-/

import ToMathlib.Control.Comonad.Basic
import Mathlib.Data.PFunctor.Univariate.M
import ToMathlib.PFunctor.Equiv.Basic

/-! # Cofree Comonads

This file defines the `Cofree` comonad, which is a comonad that is constructed from a functor and a
coalgebra.

Since this is a coinductive type, the only way to define it right now is to use the `M` type
construction from `PFunctor`.

## Main definitions

* `PFunctor.CofreeC`: The `Cofree` comonad.
-/

universe uA uB u v

namespace PFunctor

/-- `constProd F α` is the polynomial functor `X ↦ α × F X`.  It is the key ingredient of the cofree
  comonad on `F`.

  This is equivalent to `C α * F` but without a `⊕ PEmpty` in the children type. -/
def constProd (P : PFunctor.{uA, uB}) (α : Type u) : PFunctor.{max uA u, uB} where
  A := α × P.A
  B := fun s : α × P.A => P.B s.2

/-- `CofreeC F α` is the cofree comonad generated by `F`
    with head labels of type `α`. -/
def CofreeC (F : PFunctor.{uA, uB}) (α : Type u) : Type _ :=
  M.{max uA u, uB} (constProd F α)

namespace CofreeC

/-- Head (label) of a cofree tree. -/
def head {F : PFunctor} {α : Type u} (t : CofreeC F α) : α :=
  (M.head t).1

/-- Tail of a cofree tree (an `F`-structured family of sub-trees). -/
def tail {F : PFunctor} {α : Type u} (t : CofreeC F α) :
    F (CofreeC F α) :=
  let d := M.dest t       --  d : constProd F α (CofreeC F α)
  ⟨d.1.2, d.2⟩            -- drop the constant `α` stored in `d.1.1`

end CofreeC

end PFunctor
